#!/usr/bin/env python


import rospy
# from geometry_msgs.msg import Twist
from airsim_ros_pkgs.msg import CarControls

from geometry_msgs.msg import TwistStamped
import sys, select, termios, tty

MAX_LIN_VEL = 100.0
MAX_ANG_VEL = 150.0

LIN_VEL_STEP_SIZE = 2
ANG_VEL_STEP_SIZE = 5

msg = """
Control the Airsim Car. 
---------------------------
Moving around:
        w
   a    s    d
        x

w/x : increase/decrease linear velocity ( ~ 1.0)
a/d : increase/decrease angular velocity ( ~ 1.0)

space key, s : force stop

CTRL-C to quit
"""

e = """
Communications Failed
"""

'''
def getKey():
    tty.setraw(sys.stdin.fileno())
    rlist, _, _ = select.select([sys.stdin], [], [], 0.1)
    if rlist:
        key = sys.stdin.read(1)
    else:
        key = ''

    termios.tcsetattr(sys.stdin, termios.TCSADRAIN, settings)
    return key
'''

def getKey():
    # 保存当前终端设置
    settings = termios.tcgetattr(sys.stdin)

    try:
        # 设置终端为原始模式
        tty.setraw(sys.stdin.fileno())

        # 使用select来检查是否有数据可读
        rlist, _, _ = select.select([sys.stdin], [], [], 0.1)
        if rlist:
            # 读取所有可用的按键
            keys = []
            while True:
                key = sys.stdin.read(1)
                keys.append(key)
                # 检查是否还有按键可读
                rlist, _, _ = select.select([sys.stdin], [], [], 0.01)
                if not rlist:
                    break
            return keys
        else:
            return []
    finally:
        # 恢复终端设置
        termios.tcsetattr(sys.stdin, termios.TCSADRAIN, settings)
        
        

def vels(target_linear_vel, target_angular_vel):
    return "currently:\tlinear vel %s\t angular vel %s " % (target_linear_vel,target_angular_vel)

def makeSimpleProfile(output, input, slop):
    if input > output:
        output = min( input, output + slop )
    elif input < output:
        output = max( input, output - slop )
    else:
        output = input

    return output

def constrain(input, low, high):
    if input < low:
      input = low
    elif input > high:
      input = high
    else:
      input = input

    return input

def checkLinearLimitVelocity(vel):
    vel = constrain(vel, -MAX_LIN_VEL, MAX_LIN_VEL)
    return vel

def checkAngularLimitVelocity(vel):  
    vel = constrain(vel, -MAX_ANG_VEL, MAX_ANG_VEL)   
    return vel

if __name__=="__main__":
    settings = termios.tcgetattr(sys.stdin)

    rospy.init_node('airsim_car_teleop_joy')
    pub = rospy.Publisher('/ant01/cmd_vel', TwistStamped, queue_size=10)

    status = 0
    target_linear_vel   = 0.0
    target_angular_vel  = 0.0
    control_linear_vel  = 0.0
    control_angular_vel = 0.0

    try:
        print(msg)
        while(1):
             
            # 假设getKey函数已经被定义
            keys = getKey()
            
            # 遍历按键列表
            for key in keys:
                if key == 'w':
                	target_linear_vel = checkLinearLimitVelocity(target_linear_vel + LIN_VEL_STEP_SIZE)
                	status = status + 1
                	print(vels(target_linear_vel, target_angular_vel))
                elif key == 'x':
                        target_linear_vel = checkLinearLimitVelocity(target_linear_vel - LIN_VEL_STEP_SIZE)
                        status = status + 1
                        print(vels(target_linear_vel, target_angular_vel))
                elif key == 'a':
                        target_angular_vel = checkAngularLimitVelocity(target_angular_vel + ANG_VEL_STEP_SIZE)
                        status = status + 1
                        print(vels(target_linear_vel, target_angular_vel))
                elif key == 'd':
                        target_angular_vel = checkAngularLimitVelocity(target_angular_vel - ANG_VEL_STEP_SIZE)
                        status = status + 1
                        print(vels(target_linear_vel, target_angular_vel))
                elif key == ' ' or key == 's':
                        target_linear_vel = 0.0
                        control_linear_vel = 0.0
                        target_angular_vel = 0.0
                        control_angular_vel = 0.0
                        print(vels(target_linear_vel, target_angular_vel))
                else:
                	if (key == '\x03'):
                		break

            if status == 20 :
                print(msg)
                status = 0

            # twist = Twist()
            # vel = VelCmd()
            car_commands = TwistStamped()

            control_linear_vel = makeSimpleProfile(control_linear_vel, target_linear_vel, (LIN_VEL_STEP_SIZE/2.0))

            control_angular_vel = makeSimpleProfile(control_angular_vel, target_angular_vel, (ANG_VEL_STEP_SIZE/2.0))
            
            car_commands.twist.linear.x = control_linear_vel
            car_commands.twist.angular.z = control_angular_vel

            pub.publish(car_commands)

    except:
        print(e)

    finally:
        # twist = Twist()
        car_commands = TwistStamped()
        car_commands.twist.linear.x = 0
        car_commands.twist.angular.z = 0
        pub.publish(car_commands)

    termios.tcsetattr(sys.stdin, termios.TCSADRAIN, settings)
