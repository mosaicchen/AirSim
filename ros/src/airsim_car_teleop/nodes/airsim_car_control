#!/usr/bin/env python

import math
import rospy
from geometry_msgs.msg import TwistStamped
from nav_msgs.msg import Odometry
from std_msgs.msg import String, Bool

import sys
import os
# import airsim

# 获取当前脚本的目录
current_dir = os.path.dirname(os.path.abspath(__file__))
# 构建从当前目录到airsim库目录的相对路径
relative_path = os.path.join(current_dir, '..', '..', '..', '..', 'PythonClient')
# 将相对路径添加到sys.path中
sys.path.append(relative_path)
# 现在你可以导入airsim模块了
import airsim
from airsim.types import Pose,AttackState

car_name = "drone_1"

#host_ip="127.0.0.1"

# 初始化AirSim客户端
#client = airsim.CarClient(ip=host_ip)
#client.confirmConnection()

# PID控制器参数
Kp_linear = 0.7  # 线速度比例增益
Ki_linear = 0.0  # 线速度积分增益
Kd_linear = 0.05  # 线速度微分增益

Kp_angular = 0.7  # 角速度比例增益
Ki_angular = 0.0  # 角速度积分增益
Kd_angular = 0.05  # 角速度微分增益

# PID控制器状态变量
integral_error_linear = 0.0
last_error_linear = 0.0

integral_error_angular = 0.0
last_error_angular = 0.0

max_linear_vel_diff = 4
max_angular_vel_diff = 1.6

hasSentBrake = False  #记录是否已经发送过刹车信号，若上一次已经发送，本次不继续发送刹车信号


def twist_stamped_callback(twist_stamped_msg):
    global integral_error_linear, last_error_linear, integral_error_angular, last_error_angular, hasSentBrake

    shouldSendControl = True

    # 初始化AirSim客户端
    client = airsim.CarClient(ip=host_ip)
    client.confirmConnection()

    # 获取目标线速度和角速度
    target_linear_velocity = twist_stamped_msg.twist.linear.x
    target_angular_velocity = twist_stamped_msg.twist.angular.z

    # target_linear_velocity = max(-max_linear_speed,min( target_linear_velocity,max_linear_speed))
    # target_angular_velocity = max(-max_angular_speed,min(target_angular_velocity,max_angular_speed))

    # # 获取当前车辆状态
    # car_state = client.getCarState(car_name)
    # # current_linear_velocity = car_state.kinematics_estimated.linear_velocity.x_val  # 假设x轴是前进轴
    # current_angular_velocity = car_state.kinematics_estimated.angular_velocity.z_val  # 假设z轴是转向轴

    # current_linear_velocity = car_state.speed

    # linear_vel = target_linear_velocity - current_linear_velocity
    # angular_vel = target_angular_velocity - current_angular_velocity

    # # 将油门输出转换为油门控制值
    # throttle = (linear_vel / max_linear_vel_diff)
    # throttle = max(-1, min(1, throttle))  # 限制在-1到1之间
    # print("throttle: %f"%throttle)

    # # 将方向盘输出转换为方向盘控制值
    # steering = angular_vel / max_angular_vel_diff
    # steering = max(-1, min(1, steering))  # 限制在-1到1之间
    # print("steering: %f"%steering)

    # 创建一个CarControls对象
    car_controls = airsim.CarControls()
    car_controls.gear_immediate = True
    # # if throttle==0.0:
    # # 	car_controls.handbrake = True
    # # 	car_controls.brake = 1
    # if throttle>0:
    # 	car_controls.handbrake = False
    # 	car_controls.brake = 0
    # 	car_controls.manual = False
    # 	car_controls.manual_gear = 0
    # 	car_controls.throttle = throttle
    # 	car_controls.steering = -steering
    # else:
    # 	car_controls.handbrake = False
    # 	car_controls.brake = 0
    # 	car_controls.is_manual_gear = True
    # 	car_controls.manual_gear = -1
    # 	car_controls.throttle = throttle
    # 	car_controls.steering = -steering
    # if target_linear_velocity==0.0:
    # 	car_controls.handbrake = True
    # 	car_controls.brake = 1
    # 	#car_controls.throttle = 0

    car_controls.throttle = target_linear_velocity
    car_controls.steering = -target_angular_velocity

    if target_linear_velocity == 0.0 and target_angular_velocity == 0.0:
        car_controls.handbrake = True
        car_controls.brake = 1
        if (hasSentBrake == False):
            hasSentBrake = True
            shouldSendControl = True
        else:
            shouldSendControl = False
    else:
        car_controls.handbrake = False
        car_controls.brake = 0
        hasSentBrake = False
        shouldSendControl = True

    if target_linear_velocity < 0.0:
        car_controls.is_manual_gear = True
        car_controls.manual_gear = -1
    else:
        car_controls.manual_gear = 0

    # 发送控制命令到AirSim

    if (shouldSendControl == True):
        client.setCarControls(car_controls, car_name)
    #print("car_name : "+car_name)
    #print("max_linear_speed : %f"%max_linear_speed)
    #print("max_angular_speed : %f"%max_angular_speed)
    print(twist_stamped_msg)
    #print(car_controls)

    # car_state = client.getCarState(car_name)
    # pose = Pose()
    # pose.position = car_state.kinematics_estimated.position
    # pose.position.z_val += -2.5
    # pose.orientation = car_state.kinematics_estimated.orientation

    # # print(pose)
    # client.simSetObjectPose("UAV_AS",pose)

    # objPose = client.simGetObjectPose("UAV_AS")
    # objPose = client.simListSceneObjects()
    # print(objPose)


def odom_callback(odom_msg):
    odom = Odometry()
    odom.header = odom_msg.header
    odom.child_frame_id = odom_msg.child_frame_id
    odom.pose = odom_msg.pose
    vel = math.sqrt(odom_msg.twist.twist.linear.x**2 +
                    odom_msg.twist.twist.linear.y**2)
    odom.twist.twist.linear.x = vel
    odom.twist.twist.linear.y = 0
    odom.twist.twist.linear.z = 0

    odom.twist.twist.angular.x = 0
    odom.twist.twist.angular.y = 0
    odom.twist.twist.angular.z = odom_msg.twist.twist.angular.z

    odom_pub.publish(odom)


def attack_callback(isAttack):
    client = airsim.CarClient(ip=host_ip)
    client.confirmConnection()
    
    attackState = AttackState()
    attackState.isAttack = isAttack.data
    
    client.setAttack(attackState,car_name)


def main():
    global max_linear_speed, max_angular_speed
    global host_ip, car_name
    global odom_pub

    max_linear_speed = 50
    max_angular_speed = 150

    # host_ip="127.0.0.1"
    host_ip = rospy.get_param('~host_ip', 'localhost')

    car_name = rospy.get_param('~car_name', 'drone_1')

    # host_ip=rospy.get_param('~host_ip','localhost')

    # 获取车辆的最大线速度和最大角速度
    max_linear_speed = rospy.get_param('/airsim_node/max_linear_speed',
                                       50.0)  # 默认值
    max_angular_speed = rospy.get_param('/airsim_node/max_angular_speed',
                                        50.0)  # 默认值

    # car_name = rospy.get_param('~car_name', 'drone_1')
    # print("car_name : "+car_name)

    # 订阅geometry_msgs/TwistStamped话题
    sub_topic = rospy.get_param('~input_control_topic', '/ant01/cmd_vel')

    rospy.Subscriber(sub_topic, TwistStamped, twist_stamped_callback)

    sub_attack_topic ="/airsim_node/" + car_name + "/suicide_attack"
    rospy.Subscriber(sub_attack_topic, Bool, attack_callback)

    car_id = rospy.get_param('~car_id', '1')
    odom_pub_topic = "/ant0" + car_id + "/state_estimation_ue4"
    odom_pub = rospy.Publisher(odom_pub_topic, Odometry, queue_size=10)

    use_enu = rospy.get_param('~use_enu', True)
    odom_suffix = "enu" if use_enu else "ned"
    odom_sub_topic = "/airsim_node/" + car_name + "/odom_local_" + odom_suffix
    rospy.Subscriber(odom_sub_topic, Odometry, odom_callback)

    # client = airsim.CarClient(ip=host_ip)

    # 保持Python脚本运行直到节点停止
    rospy.spin()


if __name__ == '__main__':
    rospy.init_node('airsim_car_control')
    main()
